package auth

import (
	"net/http"
	"strings"
)

// TicketAuthScheme is the HTTP authorization scheme used for tickets
// in HTTP request or response Authorization headers.
const TicketAuthScheme = "Sourcegraph-Ticket "

// A TicketAuthedTransport adds a "Authorization: Sourcegraph-Ticket
// xxx..." header to each request for each of its
// SignedTicketStrings. It can be used to perform HTTP requests with
// specific permissions on a resource. The signed ticket strings must
// be generated by the Sourcegraph server.
//
// Currently only internal (non-public) API endpoints return or
// require tickets.
type TicketAuthedTransport struct {
	// SignedTicketStrings are the signed ticket strings to send with
	// each HTTP request. They must not contain the
	// "Sourcegraph-Ticket " prefix (the auth scheme).
	SignedTicketStrings []string

	// Transport is the underlying HTTP transport to use. If nil,
	// http.DefaultTransport is used.
	Transport http.RoundTripper
}

// RoundTrip implements http.RoundTripper.
func (t *TicketAuthedTransport) RoundTrip(req *http.Request) (*http.Response, error) {
	var transport http.RoundTripper
	if t.Transport != nil {
		transport = t.Transport
	} else {
		transport = http.DefaultTransport
	}

	if len(t.SignedTicketStrings) > 0 {
		// To set extra headers, we must make a copy of the Request so
		// that we don't modify the Request we were given. This is
		// required by the specification of http.RoundTripper.
		req = cloneRequest(req)
		for _, tstr := range t.SignedTicketStrings {
			req.Header.Add("authorization", TicketAuthScheme+tstr)
		}
	}

	// Make the HTTP request.
	return transport.RoundTrip(req)
}

// GetSignedTicketStrings gets the signed ticket strings from the
// subset of the HTTP headers that are of the form "Authorization:
// Sourcegraph-Ticket xxx...". The returned strings do not include the
// "Sourcegraph-Ticket " prefix.
//
// The returned strings can be used in TicketAuthedTransport's
// SignedTicketStrings field to authenticate outgoing requests using
// these tickets.
func GetSignedTicketStrings(hdr http.Header) []string {
	var tstrs []string
	for _, authHdr := range hdr[http.CanonicalHeaderKey("authorization")] {
		if !strings.HasPrefix(authHdr, TicketAuthScheme) {
			continue
		}
		tstrs = append(tstrs, strings.TrimPrefix(authHdr, TicketAuthScheme))
	}
	return tstrs
}
